{"version":3,"file":"static/js/415.a12edd81.chunk.js","mappings":"8MAEMA,EAAS,mCACTC,EAAS,gCAEFC,EAAU,mCAAG,WAAOC,GAAP,4FAAmBC,EAAnB,+BAA4B,CAAC,EAA7B,SACLC,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAsBE,EAAtB,oBAA4CH,GAAU,CACvEI,OAAAA,IAFsB,cAClBE,EADkB,yBAKjBA,GALiB,2CAAH,qD,8FCFVC,EAAa,SAAC,GAAc,IAAZD,EAAW,EAAXA,KAC3B,GAA6BE,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAClB,OACE,+BACE,wBACGJ,EAAKK,KAAI,SAAAC,GAAK,OACb,SAAC,KAAD,WACE,SAAC,KAAD,CACEC,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMP,EAAWC,GAF5B,SAIGE,EAAMK,UALIC,EAAAA,EAAAA,MADF,OAatB,C,2IClBYC,EAAaC,EAAAA,GAAAA,GAAH,mEAKVC,EAAWD,EAAAA,GAAAA,GAAH,4CAIRE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,6G,kHCgBtB,UAvBa,WACX,OAA4CI,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,mCAAG,4FACC,qBADD,UAEK3B,EAAAA,EAAAA,GADJ,sBADD,gBAEVI,EAFU,EAEVA,KACRoB,EAAkBpB,EAAKwB,SACvBF,GAAa,GAJK,2CAAH,qDAWjB,OAJAG,EAAAA,EAAAA,YAAU,WACRF,GACD,GAAE,KAGD,4BACE,SAAC,KAAD,8BACCF,IAAa,SAAC,IAAD,CAAYrB,KAAMmB,MAGrC,C,uDCzBM,IAkBIP,EAAS,eAACc,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACtB,EAAIuB,GAWvD,OAREvB,IAFFuB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Api/Api.jsx","components/MoviesList/MoviesList.jsx","components/MoviesList/MoviesList.styled.jsx","pages/Home.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '56dd70469223270b37ebfbc5f203adb4';\nconst apiUrl = 'https://api.themoviedb.org/3/';\n\nexport const getDataApi = async (apiRequest, params = {}) => {\n  const data = await axios.get(`${apiUrl}${apiRequest}?api_key=${apiKey}`, {\n    params,\n  });\n\n  return data;\n};\n","import { ListItem, MovieLink } from './MoviesList.styled';\nimport { useLocation } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nexport const MoviesList = ({ data }) => {\n  const { pathname, search } = useLocation();\n  return (\n    <>\n      <ul>\n        {data.map(movie => (\n          <ListItem key={nanoid()}>\n            <MovieLink\n              to={`/movies/${movie.id}`}\n              state={{ from: pathname + search }}\n            >\n              {movie.title}\n            </MovieLink>\n          </ListItem>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const HeaderPage = styled.h1`\n  margin-left: 20px;\n  font-weight: 500;\n`;\n\nexport const ListItem = styled.li`\n  margin-top: 8px;\n`;\n\nexport const MovieLink = styled(Link)`\n  padding: 0 16px;\n  text-decoration: none;\n  font-weight: 500;\n  color: #144470;\n`;\n","import { getDataApi } from 'components/Api/Api';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { HeaderPage } from 'components/MoviesList/MoviesList.styled';\nimport { useEffect, useState } from 'react';\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isReplied, setIsReplied] = useState(false);\n\n  const getTrending = async () => {\n    const apiRequest = 'trending/movie/day';\n    const { data } = await getDataApi(apiRequest);\n    setTrendingMovies(data.results);\n    setIsReplied(true);\n  };\n\n  useEffect(() => {\n    getTrending();\n  }, []);\n\n  return (\n    <div>\n      <HeaderPage> Trending today</HeaderPage>\n      {isReplied && <MoviesList data={trendingMovies} />}\n    </div>\n  );\n};\n\nexport default Home;\n\n// //trending\n// const apiRequest = 'trending/movie/day';\n\n// // search\n// // const apiRequest = 'search/movie';\n// // const params = { query: 'Jack Reacher' };\n\n// // get-movie-details\n// //const apiRequest = 'movie/343611';\n\n// // get-movie-credits\n// // const apiRequest = 'movie/343611/credits';\n\n// // get-movie-reviews\n// //const apiRequest = 'movie/343611/reviews';\n// const res = await getDataApi(apiRequest, params);\n\n// console.log(res);\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["apiKey","apiUrl","getDataApi","apiRequest","params","axios","data","MoviesList","useLocation","pathname","search","map","movie","to","id","state","from","title","nanoid","HeaderPage","styled","ListItem","MovieLink","Link","useState","trendingMovies","setTrendingMovies","isReplied","setIsReplied","getTrending","results","useEffect","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}