{"version":3,"file":"static/js/493.07be17ec.chunk.js","mappings":"8MAEMA,EAAS,mCACTC,EAAS,gCAEFC,EAAU,mCAAG,WAAOC,GAAP,4FAAmBC,EAAnB,+BAA4B,CAAC,EAA7B,SACLC,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAsBE,EAAtB,oBAA4CH,GAAU,CACvEI,OAAAA,IAFsB,cAClBE,EADkB,yBAKjBA,GALiB,2CAAH,qD,6JCCVC,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCF,EAAAA,EAAAA,WAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,IAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAA8BN,EAAAA,EAAAA,UAAS,IAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAW,mCAAG,+FACZhB,EADY,gBACUK,EADV,sBAEKN,EAAAA,EAAAA,GAAWC,GAFhB,gBAEVG,EAFU,EAEVA,KACRM,EAAaN,EAAKc,MAClBN,GAAgB,GAJE,2CAAH,qDAcjB,OAPAO,EAAAA,EAAAA,YAAU,WACRL,EAAgBM,EAAAA,EAAAA,cAChBJ,EAAWI,EAAAA,EAAAA,SACXH,GAED,GAAE,KAGD,0BACE,wBAEIN,GACEF,EAAUY,KAAI,SAAAC,GAAI,OAChB,2BACE,uBAAIA,EAAKC,QACT,uBAAID,EAAKE,aAET,gBACEC,IACEH,EAAKI,aAAL,UACOb,EADP,eAC0BS,EAAKI,cAC3BX,EAENY,IAAKL,EAAKC,KACVK,MAAM,aAXDC,EAAAA,EAAAA,MADO,OAsB7B,EAED,W,qDCxDO,IAKMT,EAAoB,CAC/BP,aAAc,8BACdE,QACE,gK,uDCPG,IAkBIc,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Api/Api.jsx","pages/Cast.jsx","routerPaths/paths.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '56dd70469223270b37ebfbc5f203adb4';\nconst apiUrl = 'https://api.themoviedb.org/3/';\n\nexport const getDataApi = async (apiRequest, params = {}) => {\n  const data = await axios.get(`${apiUrl}${apiRequest}?api_key=${apiKey}`, {\n    params,\n  });\n\n  return data;\n};\n","import { getDataApi } from 'components/Api/Api';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { defaultStaticPath } from '../routerPaths/paths';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [isActiveCast, setIsActiveCast] = useState(false);\n  const [tmdbImageSrv, setTmdbImageSrv] = useState('');\n  const [noImage, setNoImage] = useState('');\n\n  const getCastInfo = async () => {\n    const apiRequest = `movie/${movieId}/credits`;\n    const { data } = await getDataApi(apiRequest);\n    setMovieCast(data.cast);\n    setIsActiveCast(true);\n  };\n\n  useEffect(() => {\n    setTmdbImageSrv(defaultStaticPath.tmdbImageSrv);\n    setNoImage(defaultStaticPath.noImage);\n    getCastInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      <ul>\n        {\n          isActiveCast &&\n            movieCast.map(item => (\n              <li key={nanoid()}>\n                <p>{item.name}</p>\n                <p>{item.character}</p>\n\n                <img\n                  src={\n                    item.profile_path\n                      ? `${tmdbImageSrv}w300${item.profile_path}`\n                      : noImage\n                  }\n                  alt={item.name}\n                  width=\"150px\"\n                />\n              </li>\n            ))\n\n          // <p>We don't have any cast for this movie.</p>\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","export const pageName = {\n  home: '/',\n  movies: '/movies',\n};\n\nexport const defaultStaticPath = {\n  tmdbImageSrv: 'https://image.tmdb.org/t/p/',\n  noImage:\n    'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-grey-c2ebdbb057f2a7614185931650f8cee23fa137b93812ccb132b9df511df1cfac.svg',\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["apiKey","apiUrl","getDataApi","apiRequest","params","axios","data","Cast","movieId","useParams","useState","movieCast","setMovieCast","isActiveCast","setIsActiveCast","tmdbImageSrv","setTmdbImageSrv","noImage","setNoImage","getCastInfo","cast","useEffect","defaultStaticPath","map","item","name","character","src","profile_path","alt","width","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}