{"version":3,"file":"static/js/736.c0cf0525.chunk.js","mappings":"8MAEMA,EAAS,mCACTC,EAAS,gCAEFC,EAAU,mCAAG,WAAOC,GAAP,4FAAmBC,EAAnB,+BAA4B,CAAC,EAA7B,SACLC,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAsBE,EAAtB,oBAA4CH,GAAU,CACvEI,OAAAA,IAFsB,cAClBE,EADkB,yBAKjBA,GALiB,2CAAH,qD,wJCAVC,EAAU,WACrB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAW,mCAAG,+FACZV,EADY,gBACUK,EADV,sBAEKN,EAAAA,EAAAA,GAAWC,GAFhB,gBAEVG,EAFU,EAEVA,KACRM,EAAgBN,EAAKQ,SAHH,2CAAH,qDAUjB,OALAC,EAAAA,EAAAA,YAAU,WACRF,GAED,GAAE,KAGD,0BACE,wBACGF,EAAaK,OACZL,EAAaM,KAAI,SAAAC,GAAI,OACnB,2BACE,wBAAKA,EAAKC,UACV,uBAAID,EAAKE,aAFFC,EAAAA,EAAAA,MADU,KAOrB,wEAKT,EAED,W,uDCpCO,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Api/Api.jsx","pages/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '56dd70469223270b37ebfbc5f203adb4';\nconst apiUrl = 'https://api.themoviedb.org/3/';\n\nexport const getDataApi = async (apiRequest, params = {}) => {\n  const data = await axios.get(`${apiUrl}${apiRequest}?api_key=${apiKey}`, {\n    params,\n  });\n\n  return data;\n};\n","import { getDataApi } from 'components/Api/Api';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n\n  const getCastInfo = async () => {\n    const apiRequest = `movie/${movieId}/reviews`;\n    const { data } = await getDataApi(apiRequest);\n    setMovieReviews(data.results);\n  };\n  useEffect(() => {\n    getCastInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      <ul>\n        {movieReviews.length ? (\n          movieReviews.map(item => (\n            <li key={nanoid()}>\n              <h3>{item.author}</h3>\n              <p>{item.content}</p>\n            </li>\n          ))\n        ) : (\n          <p>We don`t have any reviews for this movie.</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["apiKey","apiUrl","getDataApi","apiRequest","params","axios","data","Reviews","movieId","useParams","useState","movieReviews","setMovieReviews","getCastInfo","results","useEffect","length","map","item","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}